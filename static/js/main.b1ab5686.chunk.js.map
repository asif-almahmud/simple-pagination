{"version":3,"sources":["components/dataTable/Table.js","components/dataTable/DataTable.js","App.js","index.js"],"names":["Table","tableData","thNames","thStyle","tdProperties","tdStyle","noOfColumns","length","thRowContent","i","push","name","tdRowContent","style","margin","width","map","row","index","value","propertyName","Data","data","noOfRows","DataTable","useState","rowsPerPage","setRowsPerPage","currentPage","setCurrentPage","totalPages","setTotalPages","dataContentPerPage","filter","id","useEffect","textAlign","border","backgroundColor","paddingTop","paddingBottom","type","max","onChange","e","target","arrowColor","buttonBorderColor","activeBackgroundColor","activeDigitColor","dotColor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sLAEe,SAASA,EAAT,GAUb,IAJE,IALFC,EAKC,EALDA,UACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,QACAC,EAEC,EAFDA,aACAC,EACC,EADDA,QAEMC,EAAcJ,EAAQK,OAExBC,EAAe,GACVC,EAAI,EAAGA,EAAIH,EAAaG,IAAKD,EAAaE,KAAK,CAAEC,KAAMT,EAAQO,KAExE,IAAIG,EAAe,GACnB,IAASH,EAAI,EAAGA,EAAIH,EAAaG,IAC/BG,EAAaF,KAAK,CAAEC,KAAMP,EAAaK,KAEzC,OACE,qBAAKI,MAAO,CAAEC,OAAQ,OAAQC,MAAO,QAArC,SACE,wBAAOF,MAAO,CAAEE,MAAO,QAAvB,UACE,gCACE,6BACGP,EAAaQ,KAAI,SAACC,EAAKC,GAAN,OAChB,oBAAIL,MAAOV,EAAX,SACE,+BAAOc,EAAIN,QADYO,UAM/B,gCACGjB,EAAUe,KAAI,SAACC,EAAKC,GAAN,OACb,6BACGN,EAAaI,KAAI,SAACG,GACjB,IAAMC,EAAeD,EAAMR,KAC3B,OACE,oBAAIE,MAAOR,EAAX,SACE,+BAAOY,EAAIG,MADYF,OAJtBA,a,kBC3BfG,EAAOC,EACPC,EAAWF,EAAKd,OAmEPiB,EAjEG,WAChB,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAoCJ,mBAASF,EAAWG,GAAxD,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAAqBX,EAAKY,QAC9B,SAACX,GAAD,OACEA,EAAKY,IAAMN,EAAcF,GACzBJ,EAAKY,IAAMN,EAAc,GAAKF,KAQlC,OALAS,qBAAU,WACRJ,EAAcR,EAAWG,GACzBG,EAAe,KACd,CAACH,IAGF,gCACGA,GACC,cAAC1B,EAAD,CACEC,UAAW+B,EACX9B,QAAS,CAAC,OAAQ,QAAS,SAAU,SACrCE,aAAc,CAAC,aAAc,QAAS,SAAU,SAChDD,QAAS,CACPiC,UAAW,SACXC,OAAQ,iBACRC,gBAAiB,UACjBC,WAAY,MACZC,cAAe,OAEjBnC,QAAS,CACP+B,UAAW,SACXC,OAAQ,iBACRC,gBAAiB,UACjBC,WAAY,MACZC,cAAe,SAKrB,sBAAK3B,MAAO,CAAEC,OAAQ,QAAtB,+CACqC,IACnC,uBACEK,MAAOO,EACPe,KAAK,SACLC,IAAK,IACLC,SAAU,SAACC,GAAD,OAAOjB,EAAeiB,EAAEC,OAAO1B,aAI5CO,GACC,cAAC,IAAD,CACEI,WAAYA,EACZD,eAAgBA,EAChBiB,WAAY,UACZC,kBAAmB,GACnBC,sBAAuB,UACvBC,iBAAkB,QAClBC,SAAU,aCxDLC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.b1ab5686.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Table({\n  tableData,\n  thNames,\n  thStyle,\n  tdProperties,\n  tdStyle,\n}) {\n  const noOfColumns = thNames.length;\n\n  var thRowContent = [];\n  for (var i = 0; i < noOfColumns; i++) thRowContent.push({ name: thNames[i] });\n\n  var tdRowContent = [];\n  for (var i = 0; i < noOfColumns; i++)\n    tdRowContent.push({ name: tdProperties[i] });\n\n  return (\n    <div style={{ margin: \"1rem\", width: \"100%\" }}>\n      <table style={{ width: \"100%\" }}>\n        <thead>\n          <tr>\n            {thRowContent.map((row, index) => (\n              <th style={thStyle} key={index}>\n                <span>{row.name}</span>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {tableData.map((row, index) => (\n            <tr key={index}>\n              {tdRowContent.map((value) => {\n                const propertyName = value.name;\n                return (\n                  <td style={tdStyle} key={index}>\n                    <span>{row[propertyName]}</span>\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Table from \"./Table\";\nimport data from \"./MOCK_DATA.json\";\nimport Paginate from \"react-paginate-in-peace\";\n\nconst Data = data;\nconst noOfRows = Data.length;\n\nconst DataTable = () => {\n  const [rowsPerPage, setRowsPerPage] = useState(20);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(noOfRows / rowsPerPage);\n\n  const dataContentPerPage = Data.filter(\n    (data) =>\n      data.id <= currentPage * rowsPerPage &&\n      data.id > (currentPage - 1) * rowsPerPage\n  );\n\n  useEffect(() => {\n    setTotalPages(noOfRows / rowsPerPage);\n    setCurrentPage(1);\n  }, [rowsPerPage]);\n\n  return (\n    <div>\n      {rowsPerPage && (\n        <Table\n          tableData={dataContentPerPage}\n          thNames={[\"Name\", \"Email\", \"Gender\", \"Phone\"]}\n          tdProperties={[\"first_name\", \"email\", \"gender\", \"phone\"]}\n          thStyle={{\n            textAlign: \"center\",\n            border: \"1px solid #ddd\",\n            backgroundColor: \"#E5EAF0\",\n            paddingTop: \"2px\",\n            paddingBottom: \"2px\",\n          }}\n          tdStyle={{\n            textAlign: \"center\",\n            border: \"1px solid #ddd\",\n            backgroundColor: \"#edf0f4\",\n            paddingTop: \"2px\",\n            paddingBottom: \"2px\",\n          }}\n        />\n      )}\n\n      <div style={{ margin: \"2rem\" }}>\n        Number of rows to display per page{\" \"}\n        <input\n          value={rowsPerPage}\n          type=\"number\"\n          max={100}\n          onChange={(e) => setRowsPerPage(e.target.value)}\n        />\n      </div>\n\n      {rowsPerPage && (\n        <Paginate\n          totalPages={totalPages}\n          setCurrentPage={setCurrentPage}\n          arrowColor={\"#21385b\"}\n          buttonBorderColor={\"\"}\n          activeBackgroundColor={\"#21385b\"}\n          activeDigitColor={\"white\"}\n          dotColor={\"blue\"}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default DataTable;\n","import DataTable from \"./components/dataTable/DataTable\";\n\nfunction App() {\n  return (\n    <div>\n      <DataTable />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}